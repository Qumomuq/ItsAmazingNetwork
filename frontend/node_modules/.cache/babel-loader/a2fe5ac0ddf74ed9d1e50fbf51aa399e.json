{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { GET_POSTS, GET_POST, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, ADD_COMMENT, REMOVE_COMMENT } from \"./types\"; // Get posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/posts\");\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get post\n\nexport const getPost = postId => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/${postId}`);\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Toggle Like\n\nexport const toggleLike = postId => async dispatch => {\n  try {\n    const res = await axios.post(`/api/posts/${postId}/like`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete Post\n\nexport const deletePost = postId => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/${postId}`);\n    dispatch({\n      type: DELETE_POST,\n      payload: postId\n    });\n    dispatch(setAlert(\"Post Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Post\n\nexport const addPost = formData => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    const res = await axios.post(\"/api/posts\", formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n    dispatch(setAlert(\"Post Added\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Comment\n\nexport const addComment = (postId, formData) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    const res = await axios.post(`/api/posts/${postId}/comments`, formData, config);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    dispatch(setAlert(\"Comment Added\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete Comment\n\nexport const deleteComment = (postId, commentId) => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/comments/${commentId}`);\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId\n    });\n    dispatch(setAlert(\"Comment Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/illus/WebstormProjects/ItsAmazingNetwork/frontend/src/actions/post.js"],"names":["axios","setAlert","GET_POSTS","GET_POST","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","ADD_COMMENT","REMOVE_COMMENT","getPosts","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","getPost","postId","toggleLike","post","deletePost","delete","addPost","formData","config","headers","addComment","deleteComment","commentId"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { setAlert } from \"./alert\";\r\nimport {\r\n  GET_POSTS,\r\n  GET_POST,\r\n  POST_ERROR,\r\n  UPDATE_LIKES,\r\n  DELETE_POST,\r\n  ADD_POST,\r\n  ADD_COMMENT,\r\n  REMOVE_COMMENT\r\n} from \"./types\";\r\n\r\n// Get posts\r\nexport const getPosts = () => async dispatch => {\r\n  try {\r\n    const res = await axios.get(\"/api/posts\");\r\n\r\n    dispatch({ type: GET_POSTS, payload: res.data });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Get post\r\nexport const getPost = postId => async dispatch => {\r\n  try {\r\n    const res = await axios.get(`/api/posts/${postId}`);\r\n\r\n    dispatch({ type: GET_POST, payload: res.data });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Toggle Like\r\nexport const toggleLike = postId => async dispatch => {\r\n  try {\r\n    const res = await axios.post(`/api/posts/${postId}/like`);\r\n\r\n    dispatch({ type: UPDATE_LIKES, payload: res.data });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Delete Post\r\nexport const deletePost = postId => async dispatch => {\r\n  try {\r\n    await axios.delete(`/api/posts/${postId}`);\r\n\r\n    dispatch({ type: DELETE_POST, payload: postId });\r\n    dispatch(setAlert(\"Post Removed\", \"success\"));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Add Post\r\nexport const addPost = formData => async dispatch => {\r\n  const config = {\r\n    headers: { \"Content-Type\": \"application/json\" }\r\n  };\r\n  try {\r\n    const res = await axios.post(\"/api/posts\", formData, config);\r\n\r\n    dispatch({ type: ADD_POST, payload: res.data });\r\n    dispatch(setAlert(\"Post Added\", \"success\"));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Add Comment\r\nexport const addComment = (postId, formData) => async dispatch => {\r\n  const config = {\r\n    headers: { \"Content-Type\": \"application/json\" }\r\n  };\r\n  try {\r\n    const res = await axios.post(\r\n      `/api/posts/${postId}/comments`,\r\n      formData,\r\n      config\r\n    );\r\n\r\n    dispatch({ type: ADD_COMMENT, payload: res.data });\r\n    dispatch(setAlert(\"Comment Added\", \"success\"));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Delete Comment\r\nexport const deleteComment = (postId, commentId) => async dispatch => {\r\n  try {\r\n    await axios.delete(`/api/posts/comments/${commentId}`);\r\n\r\n    dispatch({ type: REMOVE_COMMENT, payload: commentId });\r\n    dispatch(setAlert(\"Comment Removed\", \"success\"));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}