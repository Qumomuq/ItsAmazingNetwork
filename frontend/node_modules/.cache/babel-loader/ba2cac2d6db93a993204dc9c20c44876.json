{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE } from \"./types\";\nimport setAuthToken from \"../utils/setAuthToken\"; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\"/accounts/users\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = ({\n  name,\n  password,\n  email,\n  first_name,\n  last_name,\n  phone\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    password,\n    email,\n    first_name,\n    last_name,\n    phone\n  });\n\n  try {\n    const res = await axios.post(\"/accounts/users\", body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data.token\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data;\n\n    if (errors[\"name\"]) {\n      errors[\"name\"].forEach(msg => dispatch(setAlert(`Name: ${msg}`, \"danger\")));\n    }\n\n    if (errors[\"email\"]) {\n      errors[\"email\"].forEach(msg => dispatch(setAlert(`Email: ${msg}`, \"danger\")));\n    }\n\n    if (errors[\"password\"]) {\n      errors[\"password\"].forEach(msg => dispatch(setAlert(`Password: ${msg}`, \"danger\")));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"/api/auth\", body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data.token\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const error = err.response.data.error;\n    dispatch(setAlert(error, \"danger\"));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n};","map":{"version":3,"sources":["C:/Users/illus/WebstormProjects/ItsAmazingNetwork/frontend/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_PROFILE","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","password","email","first_name","last_name","phone","config","headers","body","JSON","stringify","post","errors","response","forEach","msg","login","error","logout"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { setAlert } from \"./alert\";\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n  CLEAR_PROFILE\r\n} from \"./types\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\n\r\n// Load User\r\nexport const loadUser = () => async dispatch => {\r\n  if (localStorage.token) {\r\n    setAuthToken(localStorage.token);\r\n  }\r\n  try {\r\n    const res = await axios.get(\"/accounts/users\");\r\n\r\n    dispatch({ type: USER_LOADED, payload: res.data });\r\n  } catch (err) {\r\n    dispatch({ type: AUTH_ERROR });\r\n  }\r\n};\r\n\r\n// Register User\r\nexport const register = ({ name, password,email, first_name,last_name,phone }) => async dispatch => {\r\n  const config = {\r\n    headers: { \"Content-Type\": \"application/json\" }\r\n  };\r\n\r\n  const body = JSON.stringify({ name, password,email, first_name,last_name,phone });\r\n\r\n  try {\r\n    const res = await axios.post(\"/accounts/users\", body, config);\r\n\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data.token\r\n    });\r\n\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    const errors = err.response.data;\r\n\r\n    if (errors[\"name\"]) {\r\n      errors[\"name\"].forEach(msg =>\r\n        dispatch(setAlert(`Name: ${msg}`, \"danger\"))\r\n      );\r\n    }\r\n\r\n    if (errors[\"email\"]) {\r\n      errors[\"email\"].forEach(msg =>\r\n        dispatch(setAlert(`Email: ${msg}`, \"danger\"))\r\n      );\r\n    }\r\n\r\n    if (errors[\"password\"]) {\r\n      errors[\"password\"].forEach(msg =>\r\n        dispatch(setAlert(`Password: ${msg}`, \"danger\"))\r\n      );\r\n    }\r\n\r\n    dispatch({\r\n      type: REGISTER_FAIL\r\n    });\r\n  }\r\n};\r\n\r\n// Login User\r\nexport const login = (email, password) => async dispatch => {\r\n  const config = {\r\n    headers: { \"Content-Type\": \"application/json\" }\r\n  };\r\n\r\n  const body = JSON.stringify({ email, password });\r\n\r\n  try {\r\n    const res = await axios.post(\"/api/auth\", body, config);\r\n\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data.token\r\n    });\r\n\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    const error = err.response.data.error;\r\n\r\n    dispatch(setAlert(error, \"danger\"));\r\n\r\n    dispatch({\r\n      type: LOGIN_FAIL\r\n    });\r\n  }\r\n};\r\n\r\n// Logout\r\nexport const logout = () => dispatch => {\r\n  dispatch({ type: LOGOUT });\r\n  dispatch({ type: CLEAR_PROFILE });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}